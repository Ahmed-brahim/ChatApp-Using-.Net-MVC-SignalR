@model SignalR_Project.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "Chat - " + @Model.Chat_Name;
    Layout = "_ChatLayout";
}

<div class="chat-container">
    <!-- Chat Sidebar (optional) -->
    <div class="chat-sidebar">
        <div class="sidebar-header">
            <h3>@Model.Chat_Name</h3>
            <img src="@Model.Chat_Image" alt="@Model.Chat_Name" class="img-fluid rounded-circle chat-image">
            @if (Model.IsGroupChat)
            {
                <div class="chat-actions mt-2">
                    <button type="button" class="btn btn-sm btn-outline-danger" id="leaveGroupBtn" data-bs-toggle="modal" data-bs-target="#leaveGroupModal">
                        <i class="fas fa-sign-out-alt"></i> Leave Group
                    </button>
                </div>
            }
        </div>
        <div class="sidebar-content">
            <div class="participants-header">
                <h5>Participants</h5>
                @if (Model.IsGroupChat)
                {
                    <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#inviteParticipantModal">
                        <i class="fas fa-user-plus"></i> Invite
                    </button>
                }
            </div>
            <ul class="participants-list">
                @foreach (var participant in Model.Participants)
                {
                    <li class="participant-item">
                        <img src="@participant.ParticipantImage" alt="@participant.ParticipantName" class="rounded-circle" width="30" height="30">
                        <span>@participant.ParticipantName</span>
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- Chat Main Content -->
    <div class="chat-main">
        <div class="messages-wrapper">
            <div class="messages" id="messagesContainer">
                @foreach (var message in Model.Messages)
                {
                    <div class="message-card @(message.SenderId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ? "sent-message" : "received-message")" id="message-@message.Id">
                        <strong>@message.SenderName</strong>: @message.Text
                        <small class="d-block text-muted">@message.TimeSent.ToString()</small>  @*"HH:mm"*@
                    </div>
                }

                <!-- Empty div for scrolling reference with padding -->
                <div id="messagesEnd"></div>
            </div>
        </div>

        <!-- Chat Input Area -->
        <div class="chat-input">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Type a message..." required>
                <button id="sendMessageButton" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</div>

@if (Model.IsGroupChat)
{
    <!-- Invite Participant Modal - Only for group chats -->
    <div class="modal fade" id="inviteParticipantModal" tabindex="-1" aria-labelledby="inviteParticipantModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="inviteParticipantModalLabel">Invite Participant</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="inviteForm" asp-controller="Chat" asp-action="InviteParticipant" method="post">
                        <input type="hidden" name="chatId" value="@Model.Chat_Id" />
                        
                        <div class="mb-3">
                            <label for="searchUser" class="form-label">Search User</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="searchUser" placeholder="Enter username or email">
                                <button class="btn btn-outline-secondary" type="button" id="searchUserButton">Search</button>
                            </div>
                            <small class="form-text text-muted">Users already in the chat won't appear in search results.</small>
                        </div>
                        
                        <div id="searchFeedback" class="mb-3" style="display: none;">
                            <!-- Feedback messages will appear here -->
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Select User</label>
                            <div id="userSearchResults" class="list-group">
                                <!-- Search results will be populated here -->
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="selectedUsers" class="form-label">Selected Users</label>
                            <div id="selectedUsers" class="selected-users">
                                <!-- Selected users will be displayed here -->
                            </div>
                            <input type="hidden" id="selectedUserIds" name="userIds" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="inviteButton">Send Invitation</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Leave Group Modal - Only for group chats -->
    <div class="modal fade" id="leaveGroupModal" tabindex="-1" aria-labelledby="leaveGroupModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="leaveGroupModalLabel">Leave Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to leave this group chat? You won't receive any further messages from this group.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <form id="leaveGroupForm" asp-controller="Chat" asp-action="LeaveGroup" method="post">
                        <input type="hidden" name="chatId" value="@Model.Chat_Id" />
                        <input type="hidden" name="userId" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" />
                        <button type="submit" class="btn btn-danger">Leave Group</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.10/signalr.min.js"></script>
    <script>
        // Connect to the SignalR hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        // Function to scroll to bottom of messages
        function scrollToBottom() {
            const messagesContainer = document.getElementById("messagesContainer");
            const messagesEnd = document.getElementById("messagesEnd");
            if (messagesEnd) {
                messagesEnd.scrollIntoView({ behavior: "smooth" });
            } else {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        }

        // Scroll to bottom on page load
        document.addEventListener('DOMContentLoaded', function() {
            scrollToBottom();
            
            // Only setup invite functionality if it's a group chat
            @if (Model.IsGroupChat)
            {
                <text>setupInviteParticipantFunctionality();</text>
            }
        });

        // Start the connection
        connection.start().then(() => {
            console.log("Connected to the chat hub");

            // Call the JoinChatGroup method after the connection is established
            const chatId = "@Model.Chat_Id";
            connection.invoke("JoinChatGroup", chatId)
                .catch(err => console.error("Error joining chat group: ", err));
        }).catch(err => {
            console.error("Error while starting connection: ", err);
        });

        // Handle receiving a message
        connection.on("ReceiveMessage", (senderId, message, chatId, senderName) => {
            // Create a new message element and append it to the messages container
            const messageContainer = document.getElementById("messagesContainer");

            const messageElement = document.createElement("div");
            messageElement.classList.add("message-card");
            messageElement.classList.add(senderId === "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" ? "sent-message" : "received-message");

            messageElement.innerHTML = `
                <strong>${senderName}</strong>: ${message}
                <small class="d-block text-muted">${new Date().toLocaleString()}</small>
            `;


            @************************************toLocaleString()********toLocaleTimeString()***********************@

            // Insert the message before the messagesEnd element
            const messagesEnd = document.getElementById("messagesEnd");
            messageContainer.insertBefore(messageElement, messagesEnd);

            // Scroll to the bottom of the message list
            setTimeout(scrollToBottom, 100); // Small delay to ensure DOM updates
        });

        // Send a new message when the Send button is clicked
        document.getElementById("sendMessageButton").addEventListener("click", function () {
            sendMessage();
        });

        // Function to send message
        function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (message) {
                const senderId = "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
                const chatId = "@Model.Chat_Id";

                // Send the message to the SignalR hub
                connection.invoke("SendMessage", senderId, message, chatId)
                    .then(() => {
                        console.log("Message sent successfully.");
                    })
                    .catch(err => {
                        console.error("Error sending message: ", err);
                    });

                // Clear the input field
                messageInput.value = "";
            }
        }

        // Send message by pressing the Enter key
        document.getElementById("messageInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                sendMessage();
            }
        });

        @if (Model.IsGroupChat)
        {
            <text>
            // Setup invite participant functionality - Only for group chats
            function setupInviteParticipantFunctionality() {
                const searchUserButton = document.getElementById("searchUserButton");
                const searchUserInput = document.getElementById("searchUser");
                const userSearchResults = document.getElementById("userSearchResults");
                const selectedUsers = document.getElementById("selectedUsers");
                const selectedUserIds = document.getElementById("selectedUserIds");
                const inviteButton = document.getElementById("inviteButton");
                const searchFeedback = document.getElementById("searchFeedback");
                const chatId = "@Model.Chat_Id"; // Get chat ID from model
                
                // Store selected users
                const selectedUsersList = [];

                // Search for users
                searchUserButton.addEventListener("click", function() {
                    const searchTerm = searchUserInput.value.trim();
                    if (searchTerm) {
                        // Show loading indicator
                        userSearchResults.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                        
                        // Hide previous feedback
                        searchFeedback.style.display = "none";
                        
                        // Make AJAX call to search for users - include chatId to filter out existing participants
                        fetch(`/Chat/SearchUsers?term=${encodeURIComponent(searchTerm)}&chatId=${encodeURIComponent(chatId)}`)
                            .then(response => response.json())
                            .then(users => {
                                userSearchResults.innerHTML = '';
                                
                                if (users.length === 0) {
                                    // Check if the user might be an existing participant
                                    fetch(`/Chat/CheckIfUserExists?term=${encodeURIComponent(searchTerm)}&chatId=${encodeURIComponent(chatId)}`)
                                        .then(response => response.json())
                                        .then(result => {
                                            if (result.exists && result.isParticipant) {
                                                // Show feedback that user is already in the chat
                                                searchFeedback.style.display = "block";
                                                searchFeedback.innerHTML = `<div class="alert alert-info">User "${result.name}" is already a participant in this chat.</div>`;
                                            } else {
                                                userSearchResults.innerHTML = '<div class="alert alert-info">No users found</div>';
                                            }
                                        })
                                        .catch(error => {
                                            console.error('Error checking user:', error);
                                            userSearchResults.innerHTML = '<div class="alert alert-info">No users found</div>';
                                        });
                                } else {
                                    users.forEach(user => {
                                        // Skip already selected users
                                        if (selectedUsersList.some(u => u.id === user.id)) {
                                            return;
                                        }
                                        
                                        const userElement = document.createElement('button');
                                        userElement.type = 'button';
                                        userElement.className = 'list-group-item list-group-item-action d-flex align-items-center';
                                        userElement.innerHTML = `
                                            <img src="${user.profileImage || '/placeholder.svg?height=30&width=30'}" alt="${user.name}" class="rounded-circle me-2" width="30" height="30">
                                            <div>
                                                <div class="fw-bold">${user.name}</div>
                                                <small>${user.email}</small>
                                            </div>
                                        `;
                                        
                                        userElement.addEventListener('click', function() {
                                            // Add user to selected users
                                            selectedUsersList.push(user);
                                            updateSelectedUsers();
                                            
                                            // Remove from search results
                                            userSearchResults.removeChild(userElement);
                                            
                                            // Clear search input
                                            searchUserInput.value = '';
                                        });
                                        
                                        userSearchResults.appendChild(userElement);
                                    });
                                }
                            })
                            .catch(error => {
                                console.error('Error searching for users:', error);
                                userSearchResults.innerHTML = '<div class="alert alert-danger">Error searching for users</div>';
                            });
                    }
                });
                
                // Update selected users display
                function updateSelectedUsers() {
                    selectedUsers.innerHTML = '';
                    
                    selectedUsersList.forEach((user, index) => {
                        const userTag = document.createElement('div');
                        userTag.className = 'selected-user-tag';
                        userTag.innerHTML = `
                            ${user.name} <span class="remove-user" data-index="${index}">&times;</span>
                        `;
                        
                        selectedUsers.appendChild(userTag);
                    });
                    
                    // Update hidden input with selected user IDs
                    selectedUserIds.value = selectedUsersList.map(user => user.id).join(',');
                    
                    // Add event listeners to remove buttons
                    document.querySelectorAll('.remove-user').forEach(button => {
                        button.addEventListener('click', function() {
                            const index = parseInt(this.getAttribute('data-index'));
                            selectedUsersList.splice(index, 1);
                            updateSelectedUsers();
                        });
                    });
                }
                
                // Handle invite button click
                inviteButton.addEventListener('click', function() {
                    if (selectedUsersList.length === 0) {
                        alert('Please select at least one user to invite');
                        return;
                    }
                    
                    const form = document.getElementById('inviteForm');
                    form.submit();
                });
                
                // Allow searching by pressing Enter
                searchUserInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        searchUserButton.click();
                    }
                });
            }
            </text>
        }

        // Handle participant joined notification
        connection.on("ParticipantJoined", (participantId, participantName, participantImage) => {
            // Add the new participant to the list if not already present
            const participantsList = document.querySelector('.participants-list');
            
            // Check if participant already exists in the list
            const existingParticipant = Array.from(participantsList.children).find(li => 
                li.querySelector('span').textContent === participantName
            );
            
            if (!existingParticipant) {
                const newParticipant = document.createElement('li');
                newParticipant.className = 'participant-item';
                newParticipant.innerHTML = `
                    <img src="${participantImage || '/placeholder.svg?height=30&width=30'}" alt="${participantName}" class="rounded-circle" width="30" height="30">
                    <span>${participantName}</span>
                `;
                
                participantsList.appendChild(newParticipant);
                
                // Show notification
                const messageContainer = document.getElementById("messagesContainer");
                const notificationElement = document.createElement("div");
                notificationElement.className = "text-center my-2";
                notificationElement.innerHTML = `<small class="text-muted">${participantName} has joined the chat</small>`;
                
                const messagesEnd = document.getElementById("messagesEnd");
                messageContainer.insertBefore(notificationElement, messagesEnd);
                
                // Scroll to the bottom
                setTimeout(scrollToBottom, 100);
            }
        });

        // Handle participant left notification
        connection.on("ParticipantLeft", (participantId, participantName) => {
            // Remove the participant from the list
            const participantsList = document.querySelector('.participants-list');
            
            // Find the participant in the list
            const existingParticipant = Array.from(participantsList.children).find(li => 
                li.querySelector('span').textContent === participantName
            );
            
            if (existingParticipant) {
                // Remove from the list
                participantsList.removeChild(existingParticipant);
                
                // Show notification
                const messageContainer = document.getElementById("messagesContainer");
                const notificationElement = document.createElement("div");
                notificationElement.className = "text-center my-2";
                notificationElement.innerHTML = `<small class="text-muted">${participantName} has left the chat</small>`;
                
                const messagesEnd = document.getElementById("messagesEnd");
                messageContainer.insertBefore(notificationElement, messagesEnd);
                
                // Scroll to the bottom
                setTimeout(scrollToBottom, 100);
            }
        });
    </script>
}